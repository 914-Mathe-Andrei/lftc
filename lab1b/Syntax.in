whitespace ::= " " | "\t" | "\n"
terminator ::= ";"
arithmetic-op ::= "+" | "-" | "*" | "/" | "%"
relational-op ::= "<" | ">" | "<=" | ">=" | "==" | "!="
logical-op ::= "not" | "and" | "or"
expression-op ::= arithmetic-op | relational-op | logical-op

basic-type ::= "i32" | "str"
array-decl ::= "[" , const-no , ";" , type , "]"
type ::= basic-type | array-decl

term ::= const-no | const-str | identifier
expression ::= term | "(" , expression , ")" | expression , expression-op , expression
condition ::= expression

var-decl ::= ("var" | "const") , identifier , ":" , type
assignment-stmt ::= identifier , "=" , expression

if-stmt ::= "if" , "(" , condition , ")" , "{" , stmt , "}" , [ "else" , "{" , stmt , "}" ]
while-stmt ::= "while" , "(" , condition , ")" , "{" , stmt , "}"

read-stmt ::= "read" , identifier
write-stmt ::= "write" , expression

io-stmt ::= read-stmt | write-stmt
flow-stmt ::= if-stmt | while-stmt
return-stmt ::= "return" , const-no
stmt ::= 
      (var-decl | assignment-stmt | io-stmt | return-stmt) , terminator
    | flow-stmt
    | stmt{stmt}

program ::= "fn" , "main" , "(" , ")" , "->" , "i32" , "{" , stmt , "}"