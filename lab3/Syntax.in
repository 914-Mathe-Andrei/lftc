# Grammar Syntax:
# The grammar uses the EBNF notation with few changes.
#
# rule_name: expression
#   Definition of a rule
# e1 e2
#   Match e1, then match e2
# e1 | e2
#   Match e1 or e2
#   The first alternative can also appear on the next line for formatting purposes. In that case, "|" must be used before the first alternative, like so:
#       rule_name:
#           | e1
#           | e2
# [ ... ]
#   optional (none or once)
# { ... }
#   repetition (none or more)
# ( ... )
#   group
# " ... "
#   terminal string
# ' ... '
#   terminal string
# (* ... *)
#   Multiline comment
# #
#   Single line comment
#

# STARTING RULES
# ==============
start: "fn" "main" "(" ")" "->" "i32" stmt_block

# GENERAL RULES
# =============
terminator: ";"

uppercase_letter: "A" | "B" | ... | "Z"
lowercase_letter: "a" | ... | "z"
letter:
    | uppercase_letter
    | lowercase_letter

zero_digit: "0"
nonzero_digit: "1" | ... | "9"
digit:
    | zero_digit
    | nonzero_digit

id: letter { letter | digit | "_" }

int: nonzero_digit { digit }
str: '"' { letter | digit } '"'

assignment_op: "="
arithmetic_op: "+" | "-" | "*" | "/" | "%"
logical_op: "!" | "&&" | "||"
relational_op: "<" | ">" | "<=" | ">=" | "==" | "!="

basic_type:
    | "int"
    | "str"
array_type: "[" int ";" type "]"

type:
    | basic_type
    | array_type

term:
    | identifier
    | int
    | str
expression_op:
    | arithmetic_op
    | logical_op
    | relational_op
expression:
    | term
    | expression expression_op expression

condition: expression

var_declaration: ( "var" | "const" ) identifier ":" type
assignment_stmt: identifier assignment_op expression

# flow statements
if_stmt: "if" "(" condition ")" stmt_block [ "else" stmt_block ]
while_stmt: "while" "(" condition ")" stmt_block
flow_stmt:
    | if_stmt
    | while_stmt

# io statements
read_stmt: "read" identifier
write_stmt: "write" expression
io_stmt:
    | read_stmt
    | write_stmt

return_stmt: "return" ( int | str )

stmt:
    | var_declaration terminator
    | assignment_stmt terminator
    | io_stmt terminator
    | return_stmt terminator
    | flow_stmt

stmt_block: "{" { stmt } "}"
